function SolvesNotifications(){this.solvesPluginName="SolvesNotifications",this.versionId=2,this.version="1.1",this.debug=!1,this.icon=null,this.permission=null,this.actions=[],this.fireBaseConfig=null,this.fireBaseMessaging=null,this.fireBasePublicVapidKey=null,this.fireBaseTokenDivId=null,this.fireBasePermissionDivId=null,this.fireBaseMessagesDivId=null,this.serverUrlNotifications=null,this.applicationServerKey=null,this.init=function(){$.Solves.addSolvesPlugin(this.solvesPluginName,$.SolvesNotifications)},this.afterSolvesInit=function(){this.debug=$.Solves.debug,this.push_subscribe()},this.destroy=function(){this.clearData()},this.clearData=function(){this.actions=[]},this.initFireBaseConfig=function(){$.Solves.fireBaseInitialized?(this.fireBaseMessaging=firebase.messaging(),$.Solves.isNotEmpty(this.fireBasePublicVapidKey)&&(this.fireBaseMessaging.usePublicVapidKey(this.fireBasePublicVapidKey),this.fireBaseMonitoreTokenAtual(),this.fireBaseOnMessage())):console.log(this.solvesPluginName+" não encontrou firebaseConfig válida.")},this.getServerUrlNotifications=function(){return this.serverUrlNotifications},this.getApplicationServerKey=function(){return this.applicationServerKey},this.setPublicVapidKey=function(e){this.fireBasePublicVapidKey=e},this.setFireBaseTokenDivId=function(e){this.fireBaseTokenDivId=e},this.setFireBasePermissionDivId=function(e){this.fireBasePermissionDivId=e},this.setFireBaseMessagesDivId=function(e){this.fireBaseMessagesDivId=e},this.setIcon=function(e){this.icon=e},this.getIcon=function(){return $.Solves.isNotEmpty(this.icon)?this.icon:$.Solves.icon},this.addAction=function(e,i,s){var t={action:e,title:i};$.Solves.isNotEmpty(s)&&(t.icon=s),this.actions.push(t)},this.notificar=function(e,i,s,t){var o=this.mountJsonMessaging(e,i,s,t);if("Notification"in window){if(this.permission=Notification.permission,"granted"===Notification.permission)console.log("Notification permission granted"),this.mostraPwaNotification(i,o);else if("denied"!==Notification.permission){console.log("Notification permission IS NOT denied");var n=this;Notification.requestPermission().then(function(e){$.SolvesNotifications.permission=e,console.log("Notification permission request: "+e),"granted"===e&&n.mostraPwaNotification(i,o)})}this.clearData()}else console.log("This browser does not support desktop notification")},this.mostraPwaNotification=function(e,i){console.log("mostraPwaNotification = function("+e+", json){"),console.log(i),navigator.serviceWorker.getRegistration().then(function(s){s.showNotification(e,i)})},this.mountJsonMessaging=function(e,i,s,t){$.Solves.isNotEmpty(e)||(e=$.Solves.siteShortName+"_"+$.Solves.getDataAtualFormatada()+"_"+Math.random());var o={title:i,body:s,tag:e,icon:this.getIcon()};return $.Solves.isNotEmpty(t)&&(o.image=t),this.actions&&this.actions.length>0&&(o.actions=this.actions),o},this.fireBaseNotificar=function(e,i,s,t){var o=this.mountJsonMessaging(e,i,s,t);console.log(this.fireBaseMessaging),console.log(this.fireBaseMessaging.permission),"Notification"in window?(this.permission=Notification.permission,"granted"===this.fireBaseMessaging.permission?(console.log("Notification permission granted"),this.mostraPwaNotification(i,o)):"denied"!==this.fireBaseMessaging.permission&&(console.log("Notification permission IS NOT denied"),Notification.requestPermission().then(function(e){$.SolvesNotifications.permission=e,console.log("Notification permission request: "+e),"granted"===e&&this.mostraPwaNotification(i,o)})),this.clearData()):console.log("This browser does not support desktop notification")},this.fireBaseRequestPermission=function(){console.log("Requesting permission..."),this.fireBaseMessaging.requestPermission().then(function(){console.log("Notification permission granted."),console.log(this.fireBaseMessaging),console.log(this.fireBaseMessaging.permission),fireBaseResetUI()}).catch(function(e){console.log("Unable to get permission to notify.",e)})},this.fireBaseGetTokenAtual=function(){var e=this;this.fireBaseMessaging.getToken().then(function(i){i?(e.fireBaseSendTokenToServer(i),e.fireBaseUpdateUIForPushEnabled(i)):(console.log("No Instance ID token available. Request permission to generate one."),e.fireBaseUpdateUIForPushPermissionRequired(),e.fireBaseSetTokenSentToServer(!1))}).catch(function(i){console.log("An error occurred while retrieving token. ",i),e.fireBaseShowToken("Error retrieving Instance ID token. ",i),e.fireBaseSetTokenSentToServer(!1)})},this.fireBaseMonitoreTokenAtual=function(){this.fireBaseMessaging.onTokenRefresh(function(){this.fireBaseMessaging.getToken().then(function(e){console.log("Token refreshed."),this.fireBaseSetTokenSentToServer(!1),this.fireBaseSendTokenToServer(e)}).catch(function(e){console.log("Unable to retrieve refreshed token ",e),this.fireBaseShowToken("Unable to retrieve refreshed token ",e)})})},this.fireBaseSendTokenToServer=function(e){this.fireBaseIsTokenSentToServer()?console.log("Token already sent to server so won't send it again unless it changes"):(console.log("Sending token to server..."),this.fireBaseSetTokenSentToServer(!0))},this.fireBaseIsTokenSentToServer=function(){return"1"===window.localStorage.getItem("sentToServer")},this.fireBaseSetTokenSentToServer=function(e){window.localStorage.setItem("sentToServer",e?"1":"0")},this.fireBaseDeleteToken=function(){this.fireBaseMessaging.getToken().then(function(e){this.fireBaseMessaging.deleteToken(e).then(function(){console.log("Token deleted."),this.fireBaseSetTokenSentToServer(!1),this.fireBaseResetUI()}).catch(function(e){console.log("Unable to delete token. ",e)})}).catch(function(e){console.log("Error retrieving Instance ID token. ",e),this.fireBaseShowToken("Error retrieving Instance ID token. ",e)})},this.fireBaseOnMessage=function(){this.fireBaseMessaging.onMessage(function(e){console.log("Message received. ",e),this.fireBaseAppendMessage(e)})},this.fireBaseAppendMessage=function(e){if($.Solves.isNotEmpty(this.fireBaseMessagesDivId)){var i=document.querySelector("#"+this.fireBaseMessagesDivId),s=document.createElement("h5"),t=document.createElement("pre");t.style="overflow-x:hidden;",s.textContent="Received message:",t.textContent=JSON.stringify(e,null,2),i.appendChild(s),i.appendChild(t)}},this.fireBaseClearMessages=function(){if($.Solves.isNotEmpty(this.fireBaseMessagesDivId))for(var e=document.querySelector("#"+this.fireBaseMessagesDivId);e.hasChildNodes();)e.removeChild(e.lastChild)},this.fireBaseUpdateUIForPushEnabled=function(e){$.Solves.isNotEmpty(this.fireBaseTokenDivId)&&this.showHideDiv(this.fireBaseTokenDivId,!0),$.Solves.isNotEmpty(this.fireBasePermissionDivId)&&this.showHideDiv(this.fireBasePermissionDivId,!1),this.fireBaseShowToken(e)},this.fireBaseUpdateUIForPushPermissionRequired=function(){$.Solves.isNotEmpty(this.fireBaseTokenDivId)&&this.showHideDiv(this.fireBaseTokenDivId,!1),$.Solves.isNotEmpty(this.fireBasePermissionDivId)&&this.showHideDiv(this.fireBasePermissionDivId,!0)},this.fireBaseResetUI=function(){this.fireBaseClearMessages(),this.fireBaseShowToken("loading..."),this.fireBaseMessaging.getToken().then(function(e){e?(this.fireBaseSendTokenToServer(e),this.fireBaseUpdateUIForPushEnabled(e)):(console.log("No Instance ID token available. Request permission to generate one."),this.fireBaseUpdateUIForPushPermissionRequired(),this.fireBaseSetTokenSentToServer(!1))}).catch(function(e){console.log("An error occurred while retrieving token. ",e),this.fireBaseShowToken("Error retrieving Instance ID token. ",e),this.fireBaseSetTokenSentToServer(!1)})},this.fireBaseShowToken=function(e,i){$.Solves.isNotEmpty(this.fireBaseTokenDivId)&&$("#"+this.fireBaseTokenDivId).length>0?document.querySelector("#"+this.fireBaseTokenDivId).textContent=e:console.log(e)},this.showHideDiv=function(e,i){var s=$.Solves.getSolvesPlugin("SolvesUi");null!=s?s.showHideDiv(e,i):console.log(this.solvesPluginName+" não encontrou SolvesUi")},this.push_sendSubscriptionToServer=function(e,i){const s=e.getKey("p256dh"),t=e.getKey("auth"),o=(PushManager.supportedContentEncodings||["aesgcm"])[0];var n={endpoint:e.endpoint,publicKey:s?btoa(String.fromCharCode.apply(null,new Uint8Array(s))):null,authToken:t?btoa(String.fromCharCode.apply(null,new Uint8Array(t))):null,contentEncoding:o},r=$.Solves.getFormData(n);return $.Solves.doAjaxExternal(this.getServerUrlNotifications(),i,r,function(i){return e},function(e){console.log("Falha ao registrar subscription."+e)}).then(()=>e)},this.push_subscribe=function(){if($.Solves.isNotEmpty(this.getApplicationServerKey())){var e=this;return this.checkNotificationPermission().then(()=>navigator.serviceWorker.ready).then(i=>i.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e.urlBase64ToUint8Array(this.getApplicationServerKey())})).then(i=>e.push_sendSubscriptionToServer(i,"POST")).catch(e=>{"denied"===Notification.permission?console.warn("Notifications are denied by the user."):console.error("Impossible to subscribe to push notifications",e)})}},this.push_updateSubscription=function(){var e=this;navigator.serviceWorker.ready.then(e=>e.pushManager.getSubscription()).then(i=>{if(i)return e.push_sendSubscriptionToServer(i,"PUT")}).then(e=>e).catch(e=>{console.error("Error when updating the subscription",e)})},this.checkNotificationPermission=function(){return new Promise((e,i)=>"denied"===Notification.permission?i(new Error("Push messages are blocked.")):"granted"===Notification.permission?e():"default"===Notification.permission?Notification.requestPermission().then(s=>{"granted"!==s&&i(new Error("Bad permission result")),e()}):void 0)},this.push_unsubscribe=function(){var e=this;navigator.serviceWorker.ready.then(e=>e.pushManager.getSubscription()).then(i=>{if(i)return e.push_sendSubscriptionToServer(i,"DELETE")}).then(e=>e.unsubscribe()).then(()=>changePushButtonState("disabled")).catch(e=>{console.error("Error when unsubscribing the user",e)})},this.urlBase64ToUint8Array=function(e){if(!$.Solves.isNotEmpty(e))return null;const i=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),s=window.atob(i),t=new Uint8Array(s.length);for(let e=0;e<s.length;++e)t[e]=s.charCodeAt(e);return t}}$.SolvesNotifications=new SolvesNotifications,$.SolvesNotifications.init();